user  nginx;
worker_processes  2;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    # Hide nginx version information.
    server_tokens off;

    sendfile on;
    # Tell Nginx not to send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out. (adds TCP_CORK)
    tcp_nopush on;
    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
    # collates several smaller packets together into one larger packet, thus saving
    # bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
    tcp_nodelay off;
    keepalive_timeout 30;
    types_hash_max_size 2048;

    client_max_body_size 100m;
    client_body_buffer_size 32K;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    underscores_in_headers on;
    server_names_hash_bucket_size 128;

    ###########################################################################
    # log format
    ###########################################################################
    log_format access '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $body_bytes_sent '
                '"$http_referer" "$http_user_agent" $request_time $upstream_response_time "$http_x_forwarded_for"';
    log_format perf '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $body_bytes_sent '
                '"$http_referer" "$http_user_agent" $request_time $upstream_response_time';
    log_format raw '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $body_bytes_sent '
                '"$http_referer" "$http_user_agent" $request_time $upstream_response_time "$http_x_forwarded_for" '
                '"$request_body"';
    log_format access_json escape=json '{"type":"access","host":"$host","method":"$request_method","url":"$request_uri",'
                '"remoteAddr":"$remote_addr","responseStatus":$status,"responseTime":$request_time,'
                '"referer":"$http_referer","userAgent":"$http_user_agent","responseBodySize":$body_bytes_sent,'
                '"httpXForwardedFor":"$http_x_forwarded_for","upstreamResponseTime":"$upstream_response_time",'
                '"body":"$request_body","timeUnit":"s","reqId":"$upstream_http_x_req_id",'
                '"authenticatedUser":"$upstream_http_x_authenticated_user"}';
    log_format access_json_without_body escape=json
                '{"type":"access","host":"$host","method":"$request_method","url":"$request_uri",'
                '"remoteAddr":"$remote_addr","responseStatus":$status,"responseTime":$request_time,'
                '"referer":"$http_referer","userAgent":"$http_user_agent","responseBodySize":$body_bytes_sent,'
                '"httpXForwardedFor":"$http_x_forwarded_for","upstreamResponseTime":"$upstream_response_time",'
                '"body":"[ignored]","timeUnit":"s","reqId":"$upstream_http_x_req_id",'
                '"authenticatedUser":"$upstream_http_x_authenticated_user"}';

    map "$http_content_type:$request_uri" $logAccessJson {
        ~^multipart 0;
        ~:/ping 0;
        default 1;
    }

    map "$http_content_type:$request_uri" $logAccessJsonWithoutBody {
        ~^multipart 1;
        ~:/ping 0;
        default 0;
    }

    access_log /dev/stdout access_json if=$logAccessJson;
    access_log /dev/stdout access_json_without_body if=$logAccessJsonWithoutBody;
    error_log /dev/stdout;

    ###########################################################################
    # Gzip Settings
    ###########################################################################

    gzip on;
    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version  1.0;
    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;
    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;
    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;
    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;
        # text/html is always compressed by HttpGzipModule

    gzip_disable "msie6";

    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;

    ###########################################################################
    # Ssl Settings
    ###########################################################################

    # Protect against the BEAST attack by preferring RC4-SHA when using SSLv3 and TLS protocols.
    # Note that TLSv1.1 and TLSv1.2 are immune to the beast attack but only work with OpenSSL v1.0.1 and higher and has limited client support.
    # Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
    # ssl_protocols              SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    # ssl_ciphers                **
    # ssl_prefer_server_ciphers  on;

    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  10m;

    ###########################################################################
    # Virtual Host Configs
    ###########################################################################
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    upstream EC_ADMIN_CLUSTER {
        # [ip_hash/fair;]
        server 101.37.174.197:9001;
    }
}
